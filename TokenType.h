//
// Created by tim on 02.08.22.
//

#ifndef COMPILER_TOKENTYPE_H
#define COMPILER_TOKENTYPE_H
enum TokenType {
    // Single-character tokens.
    TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
    TOKEN_LEFT_CURLY, TOKEN_RIGHT_CURLY,
    TOKEN_LEFT_SQUARE_BRACKET, TOKEN_RIGHT_SQUARE_BRACKET,
    TOKEN_COMMA, TOKEN_DOT, TOKEN_SEMICOLON,
    TOKEN_COLON, TOKEN_QUESTION_MARK, TOKEN_EXCLAMATION_MARK,
    TOKEN_PLUS, TOKEN_MINUS, TOKEN_ASTERISK, TOKEN_SLASH,
    TOKEN_PERCENT, TOKEN_AMPERSAND, TOKEN_PIPE,
    TOKEN_GREATER_THAN, TOKEN_LESS_THAN,

    // One or two character tokens.
    TOKEN_EQUAL, TOKEN_NOT_EQUAL, TOKEN_LESS_THAN_EQUAL, TOKEN_GREATER_THAN_EQUAL,
    TOKEN_PLUS_EQUAL, TOKEN_MINUS_EQUAL, TOKEN_ASTERISK_EQUAL, TOKEN_SLASH_EQUAL,
    TOKEN_PERCENT_EQUAL, TOKEN_AMPERSAND_EQUAL, TOKEN_PIPE_EQUAL, TOKEN_TILDE_EQUAL,
    TOKEN_SHIFT_LEFT, TOKEN_SHIFT_RIGHT, TOKEN_LOGICAL_OR, TOKEN_LOGICAL_AND,
    TOKEN_BITWISE_OR, TOKEN_BITWISE_AND, TOKEN_BITWISE_XOR, TOKEN_BITWISE_NOT,

    // Literals.
    TOKEN_STRING, TOKEN_CHAR, TOKEN_IDENTIFIER


};
#endif //COMPILER_TOKENTYPE_H
