//
// Created by tim on 02.08.22.
//

#ifndef COMPILER_TOKENTYPE_H
#define COMPILER_TOKENTYPE_H
enum TokenType {
    // Single-character tokens.
    TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
    TOKEN_LEFT_CURLY, TOKEN_RIGHT_CURLY,
    TOKEN_LEFT_SQUARE_BRACKET, TOKEN_RIGHT_SQUARE_BRACKET,
    TOKEN_COMMA, TOKEN_DOT, TOKEN_SEMICOLON,
    TOKEN_COLON, TOKEN_QUESTION_MARK, TOKEN_BITWISE_NOT,
    TOKEN_PLUS, TOKEN_MINUS, TOKEN_STAR, TOKEN_SLASH,
    TOKEN_MODULO, TOKEN_BITWISE_AND, TOKEN_BITWISE_OR,
    TOKEN_GREATER_THAN, TOKEN_LESS_THAN, TOKEN_SET,
    TOKEN_BITWISE_XOR,

    // One or two character tokens.
    TOKEN_EQUAL, TOKEN_NOT_EQUAL,
    TOKEN_LESS_THAN_EQUAL, TOKEN_GREATER_THAN_EQUAL,
    TOKEN_PLUS_EQUAL, TOKEN_MINUS_EQUAL, TOKEN_STAR_EQUAL, TOKEN_SLASH_EQUAL,TOKEN_MODULO_EQUAL,
    TOKEN_SHIFT_LEFT, TOKEN_SHIFT_RIGHT,
    TOKEN_SHIFT_LEFT_EQUAL, TOKEN_SHIFT_RIGHT_EQUAL, TOKEN_BITWISE_OR_EQUAL, TOKEN_BITWISE_AND_EQUAL, TOKEN_BITWISE_XOR_EQUAL,
    TOKEN_PLUS_PLUS, TOKEN_MINUS_MINUS,TOKEN_AND,TOKEN_OR,

    // Literals.
    TOKEN_STRING, TOKEN_CHAR, TOKEN_IDENTIFIER,TOKEN_NUMBER,TOKEN_KEYWORD,TOKEN_EOF


};
#endif //COMPILER_TOKENTYPE_H
